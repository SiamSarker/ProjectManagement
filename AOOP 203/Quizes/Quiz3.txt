Server: The server contains multiple (at least 3) text files. The client can send a request with a text filename to the server. If the file exists, the server should send the contents of the file to the client. Otherwise the server should return file not found message.

Client: The client requests the server to send the data stored in a text file by sending the filename. When the server sends the file data back to the client, the client should print the data in the console.

Note that, this task does not require GUI.


//  server code


import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(123);
        System.out.println("Waiting for client");
        Socket socket = serverSocket.accept();
        System.out.println("Connected to Client");

        InputStreamReader isr = new InputStreamReader(socket.getInputStream());
        BufferedReader Reader = new BufferedReader(isr);


        OutputStreamWriter o = new OutputStreamWriter(socket.getOutputStream());
        BufferedWriter writer = new BufferedWriter(o);

        String data;

        while ((data = Reader.readLine()) != null){
            if (data.equals("text1.txt")){
                File file;
                BufferedReader readFile = new BufferedReader(new FileReader(data));
                String words = "";
                String line = readFile.readLine() + "\n";


                Thread t = new Thread(){
                    @Override
                    public void run() {
                        try {
                            String line = readFile.readLine() + "\n";
                            while (line != null) {
                                writer.write(line);
                                writer.flush();
                                line = Reader.readLine() + "\n";
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                };
                t.start();

            }
            else if (data.equals("text2")){

                File file;
                BufferedReader readFile = new BufferedReader(new FileReader(data));
                String words = "";
                String line = readFile.readLine() + "\n";


                Thread t = new Thread(){
                    @Override
                    public void run() {
                        try {
                            String line = readFile.readLine() + "\n";
                            while (line != null) {
                                writer.write(line);
                                writer.flush();
                                line = Reader.readLine() + "\n";
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                };
                t.start();

            }
            else if (data.equals("text3")){

                File file;
                BufferedReader readFile = new BufferedReader(new FileReader(data));
                String words = "";
                String line = readFile.readLine() + "\n";


                Thread t = new Thread(){
                    @Override
                    public void run() {
                        try {
                            String line = readFile.readLine() + "\n";
                            while (line != null) {
                                writer.write(line);
                                writer.flush();
                                line = Reader.readLine() + "\n";
                            }
                            writer.write("<eof>\n");
                            writer.flush();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                };
                t.start();

            }
            else {
                writer.write("File Not Found\n");
                writer.flush();
            }
        }


    }
}





// Client code 



import java.io.*;
import java.net.Socket;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) {

        try {
            Socket socket = new Socket("127.0.0.1", 123);

            InputStreamReader isr = new InputStreamReader(socket.getInputStream());
            BufferedReader Reader = new BufferedReader(isr);

            OutputStreamWriter o = new OutputStreamWriter(socket.getOutputStream());
            BufferedWriter writer = new BufferedWriter(o);

            Scanner sc = new Scanner(System.in);

            String fileName = sc.next();

            writer.write(fileName+".txt\n");
            writer.flush();

            Thread t = new Thread(){
                @Override
                public void run() {
                    try {
                        String line = Reader.readLine() + "\n";
                        while (line != null) {
                            if(line.equals("<eof>")) break;
                            System.out.println(line);
                            line = Reader.readLine() + "\n";
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            };
            t.start();

        }catch (Exception e){
            e.printStackTrace();
        }

    }
}
